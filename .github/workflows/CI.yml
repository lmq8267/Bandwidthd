name: 编译Bandwidthd

on:
  push:
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  TZ: Asia/Shanghai
permissions:
  contents: write
  actions: write 
jobs:
  build:
    name: Build ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:

        #- target: aarch64-unknown-linux
          #URL: aarch64-linux-musl
        
        - target: armv7l-linux-eabihf
          URL: armv7l-linux-musleabihf

        - target: armv7m-linux-eabi
          URL: armv7m-linux-musleabi
          
        - target: arm-linux-eabihf
          URL: arm-linux-musleabihf

        - target: arm-linux-eabi
          URL: arm-linux-musleabi

        - target: mipsel-linux
          URL: mipsel-linux-muslsf

        - target: mips-linux
          URL: mips-linux-muslsf

        - target: mips64-linux
          URL: mips64-linux-musl
          
        - target: x86_64-linux
          URL: x86_64-linux-musl

        - target: i686-linux
          URL: i686-linux-musl
          
    runs-on: ubuntu-latest
    env:
         TARGET: ${{ matrix.target }}
         URL: ${{ matrix.URL }}
    steps:
     - name: Checkout code
       uses: actions/checkout@v4
       
     - name: 下载linux-musl-gcc
       uses: lmq8267/dl-musl@main
       with:
        target: ${{ matrix.URL }}
        static: true
        gccpath: /opt/musl_gcc

     - name: 设置环境变量
       run: |
         CFLAGS="-ffunction-sections -fdata-sections -O2 -w $CFLAGS -I/opt/libgd-${URL}/include -I/opt/zlib-${URL}/include \
           -I/opt/libpng-${URL}/include -I/opt/libpcap-${URL}/include -I/opt/libpq-${URL}/include"
           
         LDFLAGS="-s -Wl,--gc-sections $LDFLAGS -L/opt/libgd-${URL}/lib -L/opt/zlib-${URL}/lib -L/opt/libpng-${URL}/lib \
           -L/opt/libpcap-${URL}/lib -L/opt/libpq-${URL}/lib"
           
         echo "CFLAGS=$CFLAGS" >> $GITHUB_ENV
         echo "CXXFLAGS=$CFLAGS" >> $GITHUB_ENV
         echo "CPPFLAGS=$CFLAGS" >> $GITHUB_ENV
         echo "LDFLAGS=$LDFLAGS" >> $GITHUB_ENV

     - name: 缓存 zlib
       id: cache-zlib
       uses: actions/cache@v4
       with:
        path: |
          /opt/zlib-${{ matrix.URL }}
        key: zlib-${{ matrix.URL }}-cache
     - name: 编译 zlib
       env:
         TARGET: ${{ matrix.target }}
         URL: ${{ matrix.URL }}
       run: |
         if [ ! -d "/opt/zlib-${URL}" ] || [ -z "$(find /opt/zlib-${URL}/lib -name '*.a' 2>/dev/null)" ] ; then
            wget https://www.zlib.net/zlib-1.3.1.tar.gz
            tar xf zlib-1.3.1.tar.gz
            cd zlib-1.3.1
            echo "###########################编译zlib依赖库########################"
            ./configure --static --prefix=/opt/zlib-${URL}
            make -j$(nproc)
            make install
         fi
         
     - name: 缓存 libpng
       id: cache-libpng
       uses: actions/cache@v4
       with:
        path: |
          /opt/libpng-${{ matrix.URL }}
        key: libpng-${{ matrix.URL }}-cache
     - name: 编译 libgd
       env:
         TARGET: ${{ matrix.target }}
         URL: ${{ matrix.URL }}
       run: |
         if [ ! -d "/opt/libpng-${URL}" ] || [ -z "$(find /opt/libpng-${URL}/lib -name '*.a' 2>/dev/null)" ] ; then
            wget https://download.sourceforge.net/libpng/libpng-1.6.48.tar.gz
            tar xf libpng-1.6.48.tar.gz
            cd libpng-1.6.48
            echo "###########################编译libpng依赖库########################"
            ./configure --host=${TARGET} --enable-static --disable-shared --prefix=/opt/libpng-${URL} LDFLAGS="$LDFLAGS" CFLAGS="$CFLAGS" CXXFLAGS="$CFLAGS"
            make -j$(nproc)
            make install
         fi
         
     - name: 缓存 libgd
       id: cache-libgd
       uses: actions/cache@v4
       with:
        path: |
          /opt/libgd-${{ matrix.URL }}
        key: libgd-${{ matrix.URL }}-cache
     - name: 编译 libgd
       env:
         TARGET: ${{ matrix.target }}
         URL: ${{ matrix.URL }}
       run: |
         if [ ! -d "/opt/libgd-${URL}" ] || [ -z "$(find /opt/libgd-${URL}/lib -name '*.a' 2>/dev/null)" ] ; then
            wget https://github.com/libgd/libgd/releases/download/gd-2.3.3/libgd-2.3.3.tar.gz
            tar xf libgd-2.3.3.tar.gz
            cd libgd-2.3.3
            echo "###########################编译libgd依赖库########################"
            ./configure --host=${TARGET} --enable-static --disable-shared --prefix=/opt/libgd-${URL} \
              --with-png=/opt/libpng-${URL} LDFLAGS="$LDFLAGS" CFLAGS="$CFLAGS" CXXFLAGS="$CFLAGS"
            make -j$(nproc)
            make install
         fi

     - name: 缓存 libpcap
       id: cache-libpcap
       uses: actions/cache@v4
       with:
        path: |
          /opt/libpcap-${{ matrix.URL }}
        key: libpcap-${{ matrix.URL }}-cache
     - name: 编译 libpcap
       env:
         TARGET: ${{ matrix.target }}
         URL: ${{ matrix.URL }}
       run: |
         if [ ! -d "/opt/libpcap-${URL}" ] || [ -z "$(find /opt/libpcap-${URL}/lib -name '*.a' 2>/dev/null)" ] ; then
            wget https://www.tcpdump.org/release/libpcap-1.10.5.tar.xz
            tar xf libpcap-1.10.5.tar.xz
            cd libpcap-1.10.5
            echo "###########################编译libpcap依赖库########################"
            ./configure --host=${TARGET} --enable-static --disable-shared --with-pcap=linux \
              --prefix=/opt/libpcap-${URL} LDFLAGS="$LDFLAGS" CFLAGS="$CFLAGS" CXXFLAGS="$CFLAGS"
            make -j$(nproc)
            make install
         fi
         
     - name: 缓存 libpq 
       id: cache-libpq
       uses: actions/cache@v4
       with:
        path: |
          /opt/libpq-${{ matrix.URL }}
        key: libpq-${{ matrix.URL }}-cache
     - name: 编译 libpq 静态库
       env:
        TARGET: ${{ matrix.target }}
        URL: ${{ matrix.URL }}
       run: |
        if [ ! -d "/opt/libpq-${URL}" ] || [ -z "$(find /opt/libpq-${URL}/lib -name '*.a' 2>/dev/null)" ]; then
          echo "########################### 下载 PostgreSQL 17.0 源码 ########################"
          wget -q https://ftp.postgresql.org/pub/source/v15.6/postgresql-15.6.tar.gz
          tar xf postgresql-15.6.tar.gz
          cd postgresql-15.6

          echo "########################### 配置编译选项 ########################"
          ./configure --host=${TARGET} \
              --enable-static --disable-shared \
              --without-icu --without-readline \
              --without-openssl --without-gssapi --without-pam \
              --without-ldap --without-tcl --without-perl --without-python \
              --disable-nls --disable-rpath \
              --with-zlib="yes" \
              --prefix=/opt/libpq-${URL} \
              ac_cv_func_malloc_0_nonnull=yes \
              ac_cv_func_realloc_0_nonnull=yes \
              LDFLAGS="$LDFLAGS" CFLAGS="$CFLAGS" CXXFLAGS="$CFLAGS"

           echo "########################### 编译并安装 libpq（静态版本） ########################"
            make -C src/interfaces/libpq all-static-lib -j$(nproc)
            make -C src/interfaces/libpq install

            echo "########################### 安装公共头文件 ########################"
            make -C src/include install
            make -C src/common install
            make -C src/port install

            echo "########################### 验证静态库符号 ########################"
            nm /opt/libpq-${URL}/lib/libpq.a | grep pg_encoding_to_char || echo "❌ 缺少 pg_encoding_to_char"

            ls -l /opt/libpq-${URL}/lib
        fi
   
     - name: 编译 Bandwidthd
       run: |
         export CROSS_COMPILE=${URL}-
         ./configure --host=${TARGET} --disable-shared --enable-static \
           --prefix=/opt/Bandwidthd \
           ac_cv_file__sw_lib=no \
           ac_cv_file__sw_include=no \
           ac_cv_file__usr_pkg_lib=no \
           ac_cv_file__usr_pkg_include=no \
           ac_cv_file__usr_local_pgsql_lib=no \
           ac_cv_file__usr_local_pgsql_include=no \
           ac_cv_lib_sqlite3_sqlite3_open=no \
           LDFLAGS="$LDFLAGS -lpq -lpgcommon -lpgport" CFLAGS="$CFLAGS" CXXFLAGS="$CFLAGS" CPPFLAGS="$CFLAGS"
         make 
         ls
         $STRIP bandwidthd
         file bandwidthd
         #mv -f bandwidthd bandwidthd-${TARGET}
         echo "build_time=$(date '+%Y年%m月%d日%H:%M:%S' | jq -sRr @uri)" >> $GITHUB_ENV
         #tag=$(date '+%Y-%m-%d')
         echo "tag=2.0.1" >> $GITHUB_ENV
       #continue-on-error: true  
       
     - name: 安装 UPX
       if: matrix.target != 'mips64-linux'
       uses: crazy-max/ghaction-upx@v3
       with:
        version: v4.2.4
        install-only: true
     - name: 压缩打包
       if: matrix.target != 'mips64-linux'
       run: upx --lzma --best bandwidthd
        
     - uses: actions/upload-artifact@v4
       with:
        name: Bandwidthd-${{ matrix.target }}
        path: |
           bandwidthd
           bandwidthd.conf
        
