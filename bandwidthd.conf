####################################################
# Bandwidthd.conf
####################################################
# 被注释掉的选项用于提供文档说明，并表示默认值

# 要收集统计信息的子网。流量与这些子网不匹配的部分将被忽略。
# 语法可以是 IP 子网掩码 或 CIDR 这是我的lan网段
subnet 192.168.2.0/24

# 监听的设备
# 默认情况下，Bandwidthd 会监听它检测到的第一个设备。
# 使用 "bandwidthd -l" 命令可以查看设备列表。 Padavan的lan是br0
dev "br0"

###################################################
# 一般不需要更改的选项

# 每个间隔为 2.5 分钟，这是在进行图形化操作之前要跳过的间隔数
skip_intervals 0

# 图形截断是指一个 IP 传输多少 KB 后，我们才开始绘制其图表
graph_cutoff 1024

# 将接口设置为混杂模式，以便捕获可能没有通过主机路由的流量。
promiscuous true

# 将数据记录到 CDF 文件到 /tmp/Bandwidthd_html/htdocs/log.cdf 这样重启程序 数据还在 
output_cdf true

# 启动时读取 CDF 文件 这样重启程序 数据还在 
recover_cdf true

# 用于控制 Bandwidthd 查看内容的 Libpcap 格式过滤字符串
# 请始终包括 "ip" 以避免出现奇怪的问题
#filter "ip"

# 绘制图形 - 默认启用此选项来绘制 Bandwidthd 记录的流量图表
# 如果只需要 CDF 输出或使用数据库输出选项，可以将其设置为 false。
# 如果设置为 false，Bandwidthd 将使用非常少的内存和 CPU。
graph true

# 设置 META REFRESH 秒数（默认 150，使用 0 禁用）。
meta_refresh 150

# PostgreSQL数据库配置(可选) 启用后建议关闭上方的 CDF 文件保存读取  
# pgsql_connect_string "user = 数据库用户名 dbname = 数据库名 host = 数据库服务器地址"  
# sensor_id "sensor1.mycompany.com" 

# 提供一个默认传感器名称，以避免 'unset' 值(可选) 
#sensor_id "default"

# SQLite DB 路径， 没有添加这个依赖不支持，不要启用！
#sqlite_filename "/var/www/bandwidthd/stats.db"
